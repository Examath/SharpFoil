@using SharpFoil.Model
@using System.Text
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h5>Equations</h5>

<table>
    <tr>
        <td>
            X(t)
        </td>
        <td>
            <code>@GenerateEquation()</code>
        </td>
        <td>
            <FluentButton OnClick="@(async () => await CopyToClipboardAsync(GenerateEquation()))">Copy</FluentButton>
        </td>
    </tr>
    <tr>
        <td>
            Y(t)
        </td>
        <td>
            <code>t^2</code>
        </td>
        <td>
            <FluentButton OnClick="@(async () => await CopyToClipboardAsync("t^2"))">Copy</FluentButton>
        </td>
    </tr>
    <tr>
        <td>
            R<sup>2</sup>
        </td>
        <td>
            <code>@CurveProfile.RSquared</code>
        </td>
    </tr>
</table>


@code {
    [Parameter]
    public required CurveProfile CurveProfile { get; set; }

    string GenerateEquation()
    {
        StringBuilder buffer = new($"{CurveProfile.Coefficients[0]}*t");

        for (int i = 1; i < CurveProfile.Order; i++)
        {
            double c = CurveProfile.Coefficients[i];
            buffer.Append($" {(c >= 0 ? '+' : '-')} {Math.Abs(c)}*t^{i + 1}");
        }
        return buffer.ToString();
    }

    private async Task CopyToClipboardAsync(string text)
    {
        bool isCopied = await JSRuntime.InvokeAsync<bool>("clipboardCopy", text);
        if (isCopied)
        {
            ToastService.ShowSuccess("Copied", timeout: 2500);
        }
    }
}
